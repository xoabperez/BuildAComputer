// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // For A register, load it if there's an A-instruction or if ALU
    // output destination includes A
    Not(in=instruction[15], out=Ainstruct);
    Mux16(a=outALU, b=instruction, sel=Ainstruct, out=inA);
    
    Or(a=Ainstruct, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out[0..14]=addressM, out=outA);

    // From compute spec, when a = 1, use M
    And(a=instruction[15], b=instruction[12], out=useM);
    Mux16(a=outA, b=inM, sel=useM, out=AorM);

    // ALU computes using C instruction, and always puts out
    ALU(x=outD, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU,  zr=EQ, ng=LT);

    // If c-instruction and destination includes D (d2), send to D
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);

    // If c-instruction and destination includes M (d3), write to M
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Jump to address in register based on jump field of C-instruction and
    // output of computation
    // (1) First, get additional possible values
    Not(in=LT, out=GT);
    Not(in=EQ, out=NE);
    And(a=GT, b=EQ, out=GE);
    And(a=LT, b=EQ, out=LE);

    // (2) Then match jump with ALU output
    And(a=instruction[0], b=instruction[15], out=JGT);
    And(a=instruction[1], b=instruction[15], out=JEQ);
    And(a=instruction[2], b=instruction[15], out=JLT);
    
    And(a=JGT, b=GT, out=jump1);
    And(a=JEQ, b=EQ, out=jump2);
    And(a=JLT, b=LT, out=jump3);

    Or(a=jump1, b=jump2, out=j12);
    Or(a=j12, b=jump3, out=loadPC);

    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}